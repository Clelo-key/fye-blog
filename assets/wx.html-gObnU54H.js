import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,d as s,a as i,t as e,o as d}from"./app-DnaXiwX4.js";const p={},r={id:"_4-在view中使用wx-if-condition-来判断是否需要渲染视图代码块",tabindex:"-1"},o={class:"header-anchor",href:"#_4-在view中使用wx-if-condition-来判断是否需要渲染视图代码块"};function c(n,a){return d(),t("div",null,[a[0]||(a[0]=s('<h1 id="项目结构" tabindex="-1"><a class="header-anchor" href="#项目结构"><span>项目结构:</span></a></h1><ol><li>pages页面 <ol><li>.js文件: 页面脚本文件,js函数</li><li>.json文件,当前页面配置文件,配置窗口外观,表现等</li><li>.wxml文件,当前页的模板结构文件</li><li>.wxss文件,当前页面的样式文件</li></ol></li><li>根目录json文件: <ol><li>app.json:小程序的全局配置文件,(页面路径,窗口外观,界面表现,底部bab等) <ol><li>pages结点:记录小程序当前页面的路径</li><li>window结点;记录窗口外观</li><li>style 结点,全局定义小程序样式版本</li><li>sitemapLocation结点,定义sitmap.json的存放路径</li></ol></li><li>peoject.config.json文件:项目配置工具,小程序开发工具的个性化配置 <ol><li>setting:编译配置</li><li>projectname:项目名称</li><li>appid:小程序账户id</li></ol></li><li>sitemap.json文件用来配置小程序是否允许微信索引,即是否可以通过微信搜索索引到 <ol><li>checkSitMap:project.config.json中的setting结点下的 checkSitMap字段可配置索引的开关</li></ol></li></ol></li></ol><ul><li><h1 id="基本操作" tabindex="-1"><a class="header-anchor" href="#基本操作"><span>基本操作</span></a></h1><ul><li>创建页面: 找app.json的pages结点下定义新页面的路径,自动生成改文件目录</li><li>修改项目首页: 调整app.json的pages结点下的页面路径前后顺序,第一个为首页</li></ul></li><li><h1 id="组件" tabindex="-1"><a class="header-anchor" href="#组件"><span>组件</span></a></h1><ul><li>view:普通视图容器</li><li>scrool-view:可滑动的视图容器</li><li>swiper: 轮播图容器,该组件具有一下属性. <ul><li>indicator-dots: boolean类型,默认为false,控制是否显示轮播图底部指示点</li><li>indicator-color: color类型,控制指示点颜色</li><li>indicator-active-color: color类型,当前指示点颜色</li><li>autoplay:boolean类型: 默认值false,轮播图是否自动切换</li><li>interval:number类型: 默认值5000,自动切换间隔</li><li>circular:boolean类型: 默认值false,轮播图是否采用衔接滑动</li></ul></li><li>swiper-item: 轮播图项</li><li>text: 文本组件,使用selectable属性支持长按选中</li><li>rich-text: 富文本组件,使用node属性,将结点内的内容渲染为wxml,并替换原有内容</li><li>button: 按钮组件,具有多种属性 <ul><li>通过on-type属性可以调用各种功能</li><li>type: 设置类型</li><li>size: 调整大小</li><li>plain: 镂空按钮</li></ul></li><li>image: 图片组件,默认宽高300x240,具有mode属性,该属性具有一下字段. <ul><li>scaleToFill: (默认值) 缩放模式.不保持纵横比缩放图片.使此图片的宽高完全拉伸至填满image元素.</li><li>aspectFile:缩放模式,保持横纵比缩放图片,使图片的长边能完全显示出来.也就是完整的显示图片.</li><li>aspectFill:缩放模式,保持纵横比缩放图片,使图片的短边能完全显示出来.其余部分会被剪切</li><li>widthFix:缩放模式,宽度不变,高度自动变化.保持原图宽高比不变.</li><li>heightFix:缩放模式,高度不变,宽度自动变化,保持原图宽高比不变.</li></ul></li><li>navigator:导航组件</li></ul></li></ul><h1 id="小程序api" tabindex="-1"><a class="header-anchor" href="#小程序api"><span>小程序API:</span></a></h1><p>微信小程序大致有三类API:</p><h2 id="事件监听" tabindex="-1"><a class="header-anchor" href="#事件监听"><span>事件监听</span></a></h2><p>特点:以on开头,用来监听事件的触发</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>wx.onWindowResize(function callback): 监听窗口尺寸变化的事件</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="同步api" tabindex="-1"><a class="header-anchor" href="#同步api"><span>同步API</span></a></h2><p>特点:</p><ol><li>以sync结尾的API都是同步API.</li><li>同步API的执行结果,可以通过函数返回值直接获取,如果执行出错会抛出异常.</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>wx.setStorageSync(&quot;key&quot;,&quot;value&quot;)向本地存储中写如内容.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="异步api" tabindex="-1"><a class="header-anchor" href="#异步api"><span>异步API</span></a></h2><p>特点:类似于jQuery中的$.ajax(options)函数,需要通过scucess,fall,complate接收调用的结果</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>wx.request()发起网络数据请求，通过scucess回调函数接收数据。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h1 id="wxml模板语法" tabindex="-1"><a class="header-anchor" href="#wxml模板语法"><span>WXML模板语法</span></a></h1><h2 id="数据绑定" tabindex="-1"><a class="header-anchor" href="#数据绑定"><span>数据绑定</span></a></h2>',17)),i("p",null,"1). 定义数据:在页面文件对应目录下的js文件中的data对象内。 2). 在wxml中使用插值表达式，在“"+e()+"”符号中填写绑定的数据名词。 3). 在插值表达式中可使用基本运算与逻辑判断",1),a[1]||(a[1]=s(`<h2 id="事件绑定" tabindex="-1"><a class="header-anchor" href="#事件绑定"><span>事件绑定</span></a></h2><p>小程序中常用事件有:tap,input,change 1). tap:手指触摸后离开，与点击事件相同。绑定方式：bindtap或bind:tap 2). input:文本框输入事件。绑定方式：bindinput或bind:input 3). change: 状态改变时触发。绑定方式：bindchange或bind:change</p><p>当事件触发回调时会受到一个事件对象event,该对象具有一下属性。</p><table><thead><tr><th>属性</th><th>类型</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td>type</td><td>String</td><td style="text-align:center;">事件类型</td></tr><tr><td>timeStamp</td><td>Integer</td><td style="text-align:center;">页面打开到触发事件所经过的毫秒数</td></tr><tr><td>target</td><td>Object</td><td style="text-align:center;">触发事件的组件的一些属性值集合</td></tr><tr><td>currentTarget</td><td>object</td><td style="text-align:center;">当前组件的一些属性值集合</td></tr><tr><td>detail</td><td>Object</td><td style="text-align:center;">额外的信息</td></tr><tr><td>touchers</td><td>Array</td><td style="text-align:center;">触摸事件，当前停留在屏幕中的触摸点幸喜的数组</td></tr><tr><td>changedTouches</td><td>Array</td><td style="text-align:center;">触摸事件，当前变化的触摸点信息的数组</td></tr></tbody></table><p>target和currentTarget的区别： target:是触发该事件的源头组件，而currentTarget是当前事件所绑定的组件。如下例：target对应button标签,currentTarget对应view标签</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&lt;view id=&quot;currenttarget&quot; bindtap=&quot;outhandler&quot;&gt;</span></span>
<span class="line"><span>  &lt;button id=&quot;target&quot;&gt;按钮&lt;/button&gt;</span></span>
<span class="line"><span>&lt;/view&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>outhandler函数定义:</span></span>
<span class="line"><span>  outhandler(e){</span></span>
<span class="line"><span>    console.log(e)</span></span>
<span class="line"><span>  },</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="事件传参与数据传递" tabindex="-1"><a class="header-anchor" href="#事件传参与数据传递"><span>事件传参与数据传递</span></a></h2><h3 id="_1-数据传递" tabindex="-1"><a class="header-anchor" href="#_1-数据传递"><span>1). 数据传递</span></a></h3><p>可以使用this.Date重新为Data中的值赋值.如:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>  outhandler(e){</span></span>
<span class="line"><span>    console.log(e)</span></span>
<span class="line"><span>    this.setData({</span></span>
<span class="line"><span>      dynamic:this.data.dynamic=&quot;按钮已点击&quot;</span></span>
<span class="line"><span>    })</span></span>
<span class="line"><span>  },</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-事件传参" tabindex="-1"><a class="header-anchor" href="#_2-事件传参"><span>2). 事件传参</span></a></h3><p>微信小程序,不能再绑定事件的同时为事件传递参数.如下例的错误用法.</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&lt;view id=&quot;currenttarget&quot; bindtap=&quot;outhandler(&quot;传递参数&quot;)&quot;&gt;</span></span>
<span class="line"><span>  &lt;button id=&quot;target&quot;&gt;按钮&lt;/button&gt;</span></span>
<span class="line"><span>&lt;/view&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正确用法应该使用data-info字段加上插值表达式.info为参数名.如下:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&lt;view id=&quot;currenttarget&quot; bindtap=&quot;outhandler&quot; data-info=&quot;{{&quot;传递参数&quot;}}&quot;&gt;</span></span>
<span class="line"><span>  &lt;button id=&quot;target&quot;&gt;按钮&lt;/button&gt;</span></span>
<span class="line"><span>&lt;/view&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在处理函数中我们可以使用event.target.dataset.参数名,获取具体的参数值.如:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>  outhandler(e){</span></span>
<span class="line"><span>    console.log(e)</span></span>
<span class="line"><span>    // console.log(e.target.dataset)</span></span>
<span class="line"><span>    // 在传递参数时应注意参数是在target还是在currentTarget</span></span>
<span class="line"><span>    console.log(e.currentTarget.dataset)</span></span>
<span class="line"><span>    this.setData({</span></span>
<span class="line"><span>      dynamic:this.data.dynamic=&quot;按钮已点击&quot;</span></span>
<span class="line"><span>    })</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  },</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-双向数据绑定" tabindex="-1"><a class="header-anchor" href="#_3-双向数据绑定"><span>3). 双向数据绑定</span></a></h3><p>微信小程序的双向数据绑定需要使用bindinput事件,input输入框(注意微信小程序的输入框默认空白,无任何样式),event.detail.value数据指针(数据源)</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&lt;input  id=&quot;username&quot; model:value=&quot;{{msg}}&quot; bindinput=&quot;ChangeInput&quot;&gt;&lt;/input&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>ChangeInput(e){</span></span>
<span class="line"><span>    this.setData({</span></span>
<span class="line"><span>      msg:e.detail.value</span></span>
<span class="line"><span>    })</span></span>
<span class="line"><span>  },</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="wxml渲染" tabindex="-1"><a class="header-anchor" href="#wxml渲染"><span>WXML渲染</span></a></h2>`,21)),i("h3",r,[i("a",o,[i("span",null,'4). 在view中使用wx.if="'+e(n.condition)+'"来判断是否需要渲染视图代码块.',1)])]),a[2]||(a[2]=s(`<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span></span></span>
<span class="line"><span>&lt;view wx:if=&quot;{{msg&gt;=100||msg&lt;=0}}&quot;&gt;</span></span>
<span class="line"><span>  &lt;text decode=&#39;true&#39;&gt; 彩蛋 Bong!!Bang!!! MSG≥100||MSG≤0</span></span>
<span class="line"><span>  &lt;/text&gt;</span></span>
<span class="line"><span>&lt;/view&gt;</span></span>
<span class="line"><span>&lt;view wx:elif=&quot;{{msg&gt;=50}}&quot;&gt;</span></span>
<span class="line"><span>  &lt;text decode=&#39;true&#39;&gt; 彩蛋 Bong!!Bang!!! 50≤MSG&amp;lt;100</span></span>
<span class="line"><span>  &lt;/text&gt;</span></span>
<span class="line"><span>&lt;/view&gt;</span></span>
<span class="line"><span>&lt;view wx:else&gt;</span></span>
<span class="line"><span>  &lt;text decode=&#39;true&#39;&gt; 彩蛋 Bong!!Bang!!! 0&amp;lt;MSG&amp;lt;50</span></span>
<span class="line"><span>  &lt;/text&gt;</span></span>
<span class="line"><span>&lt;/view&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-列表循环" tabindex="-1"><a class="header-anchor" href="#_5-列表循环"><span>5). 列表循环</span></a></h3><p>与vue的v-for类似.</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&lt;view id=&quot;list&quot;&gt;</span></span>
<span class="line"><span>  &lt;view&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;brand&lt;/span&gt;&lt;/view&gt;</span></span>
<span class="line"><span>  &lt;view wx:for=&quot;{{array}}&quot; wx:key=&quot;id&quot; wx:for-index=&quot;id&quot; wx:for-item=&quot;obj&quot;&gt;</span></span>
<span class="line"><span>    &lt;span&gt;{{id+1}}&lt;/span&gt;&lt;span&gt;{{obj.brand}}&lt;/span&gt;</span></span>
<span class="line"><span>  &lt;/view&gt;</span></span>
<span class="line"><span>&lt;/view&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-公共样式表导入" tabindex="-1"><a class="header-anchor" href="#_6-公共样式表导入"><span>6). 公共样式表导入</span></a></h3><p>使用@import可以导入公共的样式文件</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>@import &quot;/common/common.wxss&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_7-全局下拉刷新" tabindex="-1"><a class="header-anchor" href="#_7-全局下拉刷新"><span>7). 全局下拉刷新</span></a></h3><p>在app.json.window中把enablePullDownRefresh的值设置为true. 在app.json.window中可以指定backgroundColor的值,设置下拉刷新 在app.json.window中可以指定backgroundTextStyle的值(light,dark),设置下拉刷新时,圆点的颜色</p><h2 id="tabbar" tabindex="-1"><a class="header-anchor" href="#tabbar"><span>TabBar</span></a></h2><p>在app.json.TabBar中设置底部和顶部导航栏,数量最少2最多5.顶部导航栏不显示图标.</p><p>TabBar的属性: position:TabBar的位置(bottom,top) list:tab页的标签,标签包含</p><ul><li>pagePath:页面路径</li><li>text:标签名字</li><li>inconPath:未选择时的图标路径</li><li>selectedlcoPath:选中时的图标路径</li></ul><p>borderStyle:设置TabBar的边框颜色 backgroundColor:设置TabBar的背景颜色 selectedlconPath:设置导航栏被选中时的颜色 incoPath:设置导航栏图标 color:设置文本颜色 selectedColor:选中时的文本颜色</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>  &quot;tabBar&quot;: {</span></span>
<span class="line"><span>    &quot;list&quot;: [{</span></span>
<span class="line"><span>      &quot;pagePath&quot;: &quot;pages/index/index&quot;,</span></span>
<span class="line"><span>      &quot;text&quot;: &quot;首页&quot;</span></span>
<span class="line"><span>    },{</span></span>
<span class="line"><span>      &quot;pagePath&quot;: &quot;pages/list/index&quot;,</span></span>
<span class="line"><span>      &quot;text&quot;:&quot;List&quot;</span></span>
<span class="line"><span>    }],</span></span>
<span class="line"><span>    &quot;backgroundColor&quot;: &quot;#000000&quot;,</span></span>
<span class="line"><span>    &quot;color&quot;: &quot;#FFFFFF&quot;</span></span>
<span class="line"><span>  },</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Notice:</strong> wx.navigateTo({})中的URL路径是不能tabBar中设置过的路径,不然navigateTo会失效.</p><h1 id="页面窗口配置" tabindex="-1"><a class="header-anchor" href="#页面窗口配置"><span>页面窗口配置</span></a></h1><p>常用属性:</p><ul><li>navigationBarBackgroundColor:导航栏背景颜色</li><li>navigationBarTextStyle:当前页面导航栏标题颜色,仅支持black/white</li><li>navigationBarTittleText:当前页面导航栏标题文字内容</li><li>backgroundColor当前页面窗口的背景色</li><li>backgroundTextStyle:下拉刷新时的样式dark/light</li><li>enablePullDownRefresh:是否为当前页面开启下拉刷新的效果</li><li>onReachBottomDistance:页面下滑触底事件的距离,单位是px</li></ul><h1 id="数据请求" tabindex="-1"><a class="header-anchor" href="#数据请求"><span>数据请求</span></a></h1><p>小程序对数据请求接口做出了限制,</p><ul><li>只能请求Https类型</li><li>必须将接口的域名添加到信任列表中</li></ul>`,22))])}const v=l(p,[["render",c],["__file","wx.html.vue"]]),g=JSON.parse('{"path":"/posts/wx/wx.html","title":"微信小程序 基础知识","lang":"zh-CN","frontmatter":{"title":"微信小程序 基础知识","category":["前端"],"tag":["小程序","out date"],"excerpt":"一些微信小程序的入门笔记，方便日后查阅。","date":"2020-01-01T00:00:00.000Z"},"headers":[{"level":2,"title":"事件监听","slug":"事件监听","link":"#事件监听","children":[]},{"level":2,"title":"同步API","slug":"同步api","link":"#同步api","children":[]},{"level":2,"title":"异步API","slug":"异步api","link":"#异步api","children":[]},{"level":2,"title":"数据绑定","slug":"数据绑定","link":"#数据绑定","children":[]},{"level":2,"title":"事件绑定","slug":"事件绑定","link":"#事件绑定","children":[]},{"level":2,"title":"事件传参与数据传递","slug":"事件传参与数据传递","link":"#事件传参与数据传递","children":[{"level":3,"title":"1). 数据传递","slug":"_1-数据传递","link":"#_1-数据传递","children":[]},{"level":3,"title":"2). 事件传参","slug":"_2-事件传参","link":"#_2-事件传参","children":[]},{"level":3,"title":"3). 双向数据绑定","slug":"_3-双向数据绑定","link":"#_3-双向数据绑定","children":[]}]},{"level":2,"title":"WXML渲染","slug":"wxml渲染","link":"#wxml渲染","children":[{"level":3,"title":"4). 在view中使用wx.if=\\"{{condition}}\\"来判断是否需要渲染视图代码块.","slug":"_4-在view中使用wx-if-condition-来判断是否需要渲染视图代码块","link":"#_4-在view中使用wx-if-condition-来判断是否需要渲染视图代码块","children":[]},{"level":3,"title":"5). 列表循环","slug":"_5-列表循环","link":"#_5-列表循环","children":[]},{"level":3,"title":"6). 公共样式表导入","slug":"_6-公共样式表导入","link":"#_6-公共样式表导入","children":[]},{"level":3,"title":"7). 全局下拉刷新","slug":"_7-全局下拉刷新","link":"#_7-全局下拉刷新","children":[]}]},{"level":2,"title":"TabBar","slug":"tabbar","link":"#tabbar","children":[]}],"git":{"createdTime":1739106576000,"updatedTime":1739982802000,"contributors":[{"name":"周悦","username":"周悦","email":"17723471643@163.com","commits":2,"url":"https://github.com/周悦"}]},"readingTime":{"minutes":7.05,"words":2114},"filePathRelative":"posts/wx/wx.md","localizedDate":"2020年1月1日"}');export{v as comp,g as data};
